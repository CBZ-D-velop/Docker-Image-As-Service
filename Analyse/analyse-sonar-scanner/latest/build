#!/bin/bash

# Set strict mode for better error handling
set -euo pipefail

# Naming conventions for variables and functions:
# - Variables: lowercase with underscores
# - Functions: lowercase with underscores

# Function to build the Docker image
image_build() {
    # Use double quotes around variable references to handle spaces and special characters
    MSYS_NO_PATHCONV=1 docker build \
        --build-arg VERSION="${VERSION}" \
        --build-arg MAINTAINER="${MAINTAINER}" \
        --build-arg MAINTAINER_ADDRESS="${MAINTAINER_ADDRESS}" \
        --build-arg DEFAULT_USER="${DEFAULT_USER}" \
        --build-arg DEFAULT_USER_ID="${DEFAULT_USER_ID}" \
        --build-arg DEFAULT_GROUP="${DEFAULT_GROUP}" \
        --build-arg DEFAULT_GROUP_GID="${DEFAULT_GROUP_GID}" \
        --build-arg DEFAULT_USER_HOME="${DEFAULT_USER_HOME}" \
        --build-arg DEFAULT_WORKDIR="${DEFAULT_WORKDIR}" \
        --build-arg DOCKER_API_TIMEOUT="${DOCKER_API_TIMEOUT}" \
        --build-arg NODEJS_VERSION="${NODEJS_VERSION}" \
        -t "${NAMESPACE}/${IMAGE_NAME}:${VERSION}" .

    # Check the exit code of the previous command
    if [ $? -ne 0 ]; then
        echo "Build failed with exit code $?"
        exit 1
    fi
}

# Function to push the Docker image
image_push() {
    docker tag "${NAMESPACE}/${IMAGE_NAME}:${VERSION}" "${NAMESPACE}/${IMAGE_NAME}:latest"
    docker push "${NAMESPACE}/${IMAGE_NAME}:latest"
    docker push "${NAMESPACE}/${IMAGE_NAME}:${VERSION}"
    echo "MAJOR_TAG=${MAJOR_TAG}" > "${TAG_FILE}"
    echo "MINOR_TAG=${MINOR_TAG}" >> "${TAG_FILE}"
    # Check the exit code of the previous commands
    if [ $? -ne 0 ]; then
        echo "Push failed with exit code $?"
        exit 1
    fi
}

# Function for major build
build_major() {
    echo "============ MAJOR BUILD ============"
    MAJOR_TAG=$((MAJOR_TAG + 1))
    MINOR_TAG="0"
    VERSION="${MAJOR_TAG}.${MINOR_TAG}"
    image_build
    image_push
    echo "============ MAJOR BUILD DONE ============"
}

# Function for major build
build_major() {
    echo "============ MAJOR BUILD ============"
    MAJOR_TAG=$((MAJOR_TAG + 1))
    MINOR_TAG="0"
    VERSION="${MAJOR_TAG}.${MINOR_TAG}"
    image_build
    image_push
    echo "============ MAJOR BUILD DONE ============"
}

# Function for daily build
build_daily() {
    echo "============ DAILY BUILD ============"
    DATE=$(date +'%m%d%Y')
    VERSION="${MAJOR_TAG}.${MINOR_TAG}-${DATE}"
    image_build
    image_push
    echo "============ DAILY BUILD DONE ============"
}

# Function for test build
build_test() {
    echo "============ TEST BUILD ============"
    VERSION="${MAJOR_TAG}.${MINOR_TAG}-test"
    image_build
    echo "============ TEST BUILD DONE ============"
}

# Function for docker scout build
build_scout() {
    echo "============ SCOUT BUILD ============"
    NAMESPACE="local"
    VERSION="latest-scout"
    image_build
    echo "============ SCOUT BUILD DONE ============"
}

# Function for CICD build
build_cicd() {
    echo "============ CICD BUILD ============"
    DATE=$(date +'%m%d%Y')
    VERSION="${MAJOR_TAG}.${MINOR_TAG}-${DATE}"
    image_build
    image_push
    echo "============ CICD BUILD DONE ============"
}

# Function for default build
build_default() {
    echo "============ DEFAULT BUILD ============"
    MINOR_TAG=$((MINOR_TAG + 1))
    VERSION="${MAJOR_TAG}.${MINOR_TAG}"
    image_build
    image_push
    echo "============ DEFAULT BUILD DONE ============"
    echo "MAJOR_TAG=${MAJOR_TAG}" > "${TAG_FILE}"
    echo "MINOR_TAG=${MINOR_TAG}" >> "${TAG_FILE}"
}

main() {
    TAG_FILE=".tag"
    ENV_FILE=".env"
    source "./$ENV_FILE"
    source "./${TAG_FILE}"

    # Check if the tag file exists; if not, create it with the initial value of 0.1
    if [ ! -e "${TAG_FILE}" ]; then
        MAJOR_TAG="0"
        MINOR_TAG="1"
    fi

    # Switch case for build type
    case "${1:-}" in
        "--major")
            build_major
            ;;
        "--daily")
            build_daily
            ;;
        "--test")
            build_test
            ;;
        "--scout")
            build_scout
            ;;
        "--cicd")
            build_cicd
            ;;
        *)
            build_default
            ;;
    esac
}

main "${1:-}"
