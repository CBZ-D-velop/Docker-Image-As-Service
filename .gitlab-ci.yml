# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/#customizing-settings
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence

stages:
  - gitlab-test
  - lint
  - sonarqube-check
  - generate
  - build
  - scout-analyse
  - publish
image: $NEXUS_DOCKER_GROUP_REGISTRY/$DOCKER_IMAGE__RUN_SSH


variables:
  ANSIBLE_FORCE_COLOR: "true"
  PY_COLORS: "1"
  #
  SONAR_HOST_URL: "$SONARQUBE_ADDRESS"
  SONAR_TOKEN: "$GITLAB_CI_SONARQUBE_USER_TOKEN"
  #
  DOCKER_IMAGE__ANALYSE_SONAR_SCANNER: "labocbz/analyse-sonar-scanner:latest"
  DOCKER_IMAGE__ANALYSE_DOCKER_IMAGE: "labocbz/analyse-docker-image:latest"
  DOCKER_IMAGE__BUILD_DOCKERFILE: "labocbz/build-dockerfile:latest"
  DOCKER_IMAGE__LINT_DOCKERFILE: "labocbz/lint-dockerfile:latest"
  DOCKER_IMAGE__LINT_SECRETS: "labocbz/lint-secrets:latest"
  DOCKER_IMAGE__LINT_MARKDOWN: "labocbz/lint-markdown:latest"
  DOCKER_IMAGE__RUN_SSH: "labocbz/run-ssh:latest"

###############################################################################
#################### EXTENDABLES
###############################################################################

.build: &build
  stage: build
  image: $NEXUS_DOCKER_GROUP_REGISTRY/$DOCKER_IMAGE__BUILD_DOCKERFILE
  script:
    - "cd $(pwd)/${TYPE}/${NAME}/latest && bash build --test"
  allow_failure: false
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_COMMIT_BRANCH == "develop"'

.scout-analyse: &scout-analyse
  stage: scout
  image: $NEXUS_DOCKER_GROUP_REGISTRY/$DOCKER_IMAGE__ANALYSE_DOCKER_IMAGE
  script:
    - "cd $(pwd)/${TYPE}/${NAME}/latest"
    - "bash build --scout"
    - "cd ../../../ && pwd"
    - "docker scout cves --exit-code --only-severity critical,high --format markdown --output ./cves-report.md local://local/${NAME}:latest-scout || true"
    - "docker scout recommendations local://local/${NAME}:latest-scout || true"
  allow_failure: true
  artifacts:
    expire_in: "1 month"
    paths:
      - "cves-report.md"
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_COMMIT_BRANCH == "develop"'

.publish: &publish
  stage: publish
  image: $NEXUS_DOCKER_GROUP_REGISTRY/$DOCKER_IMAGE__BUILD_DOCKERFILE
  script:
    - "cd $(pwd)/${TYPE}/${NAME}/latest && bash build --cicd"
  allow_failure: false
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

###############################################################################
#################### CI JOBS
###############################################################################

############################################
#### gitlab-test
############################################

# As a GitLab ci, we use the default template :)
sast:
  stage: gitlab-test
include:
- template: Security/SAST.gitlab-ci.yml

############################################
#### lint
############################################

dockerfile-lint:
  stage: lint
  image: $NEXUS_DOCKER_GROUP_REGISTRY/$DOCKER_IMAGE__LINT_DOCKERFILE
  script:
    - "hadolint --ignore DL3018 --ignore DL3001 --ignore DL3013 --ignore DL3008 --ignore DL3009 --ignore DL3015 $(pwd)/*/*/latest/Dockerfile"
  allow_failure: false

markdown-lint:
  stage: lint
  image: $NEXUS_DOCKER_GROUP_REGISTRY/$DOCKER_IMAGE__LINT_MARKDOWN
  script:
    - markdownlint './README.md' --disable MD013
    - markdownlint './*/*/latest/README.md' --disable MD013
  allow_failure: false

secret-lint:
  stage: lint
  image: $NEXUS_DOCKER_GROUP_REGISTRY/$DOCKER_IMAGE__LINT_SECRETS
  script:
    - "detect-secrets scan"
    - "detect-secrets audit .secrets.baseline"
  allow_failure: false

############################################
#### sonarqube
############################################

sonarqube-check:
  stage: sonarqube-check
  image: 
    name: $NEXUS_DOCKER_GROUP_REGISTRY/$DOCKER_IMAGE__ANALYSE_SONAR_SCANNER
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - ".sonar/cache"
  script: 
    - "sonar-scanner -X"

############################################
#### Generate
############################################

generate-pipelines:
  stage: generate
  image: $NEXUS_DOCKER_GROUP_REGISTRY/$DOCKER_IMAGE__RUN_SSH
  script:
    - "chmod +x ./generate-pipelines"
    - "./generate-pipelines"
  artifacts:
    paths:
      - "generated-pipelines.yml"

load-pipelines:
  stage: generate
  needs:
    - "generate-pipelines"
  trigger:
    include:
      - artifact: "generated-pipelines.yml"
        job: generate-pipelines
    strategy: depend
